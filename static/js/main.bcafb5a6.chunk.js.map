{"version":3,"sources":["components/Card.js","components/CardArray.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardArray","cardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAS,IACZC,EAAiBD,EAAjBC,GAAGC,EAAcF,EAAdE,KAAKC,EAASH,EAATG,MACf,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,6BACI,4BAAKJ,GACL,2BAAIC,MCSLI,EAfG,SAACP,GAAS,IAGlBQ,EADWR,EAAVS,OACiBC,KAAI,SAACC,EAAKC,GAC9B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOX,GAAIU,EAAKV,GAAIC,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,WAGvE,OACI,kBAAC,WAAD,KACIK,EADJ,MCDOM,EARG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,yBAAKX,UAAU,OACd,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCKlGI,EARA,SAACnB,GACb,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAkBC,OAAO,UAC9DvB,EAAMwB,WCeHC,E,kDAjBX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAQ,CACTC,UAAS,GAHC,E,gEAOhBC,KAAKC,SAAS,CAAEF,UAAU,M,+BAGxB,OAAGC,KAAKF,MAAMC,SACH,+DAEJC,KAAK5B,MAAMwB,a,GAdCM,IAAMC,WC8ClBC,G,wDAxCX,aAAc,IAAD,8BACT,gBAYJC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAACM,YAAYD,EAAME,OAAOC,SAZtC,EAAKX,MAAQ,CACTS,YAAY,GACZ1B,OAAO,IAJF,E,gEAOO,IAAD,OACf6B,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKb,SAAS,CAACpB,OAAOiC,S,+BAOhC,IAAD,EAC2Bd,KAAKF,MAA5BjB,EADJ,EACIA,OAAO0B,EADX,EACWA,YACTQ,EAAiBlC,EAAOmC,QAAO,SAACC,GAClC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQrC,EAAOuC,OAIX,yBAAK5C,UAAU,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAgBa,KAAKK,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACD,kBAAC,EAAD,CAAWxB,OAAQkC,OARtB,8C,GAxBMb,IAAMC,YCKJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEK,kBAAC,EAAD,OAGLC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bcafb5a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props)=>{\r\n    const {id,name,email} = props;//destructuring\r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Fragment } from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray = (props)=>{\r\n\r\n    const {robots} = props; //destructuring\r\n    const cardList = robots.map((user,index)=>{\r\n        return <Card key={index} id={user.id} name={user.name} email={user.email}/>\r\n    });\r\n\r\n    return (\r\n        <Fragment>\r\n           {cardList}; \r\n        </Fragment>\r\n    )\r\n        \r\n}\r\n\r\nexport default CardArray;","import React from \"react\"; \r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return (\r\n        <div className=\"pa2\">\r\n         <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return (\r\n       <div style={{overflowY: 'scroll', border: '1px solid black',height:'360px' }}>\r\n           {props.children}\r\n       </div>\r\n   )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(){ //whenever error occurs in the wrapped up component i.e. the children component, this lifecycle method gets executed\r\n      this.setState({ hasError: true}); //updating the state\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oops something wrong happened!!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardArray from '../components/CardArray';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'; //importing a component that will add the functionality of scrolling\r\nimport ErrorBoundry from '../components/ErrorBoundry'; //this is the component that handles any error in the component that its wrapping\r\nimport './App.css';\r\n\r\nclass App extends React.Component{ //the component that contains the state is known as 'smart component'\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            searchField:'',\r\n            robots:[]\r\n        }//this is the state which will usually be in the parent component\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response=> response.json())\r\n          .then(users=>this.setState({robots:users}));\r\n    }\r\n\r\n    onSearchChange = (event)=>{// custom function/method\r\n      this.setState({searchField:event.target.value}); //updating the state\r\n      \r\n    }\r\n    render(){\r\n        const { robots,searchField } = this.state; //desstructuring\r\n        const filteredRobots = robots.filter((robot)=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n            <h1>loading...</h1> :\r\n        \r\n        (\r\n            <div className=\"tc\">\r\n               <h1 className=\"f1\">ROBOFRIENDS</h1>\r\n               <SearchBox searchChange = {this.onSearchChange}/>\r\n               <Scroll>\r\n                <ErrorBoundry>\r\n               <CardArray robots={filteredRobots}/>\r\n               </ErrorBoundry>\r\n               </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; //recatdom library is used bescuse it explains that we want to render in website.If we wanted to render in mobile then we have used reactnative.\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n       <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}